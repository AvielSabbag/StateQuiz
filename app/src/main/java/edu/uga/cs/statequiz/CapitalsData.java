package edu.uga.cs.statequiz;

import android.content.ContentValues;
import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import android.view.Gravity;
import android.widget.TableRow;
import android.widget.TextView;

import com.opencsv.CSVReader;

import java.io.InputStream;
import java.io.InputStreamReader;

public class CapitalsData {
    public static final String DEBUG_TAG = "CapitalsData";
    private SQLiteDatabase db;
    private SQLiteOpenHelper capitalsDbHelper;
    private static final String[] capitalColumns = {
            CapitalsDBHelper.capitals_COLUMN_ID,
            CapitalsDBHelper.capitals_COLUMN_STATENAME,
            CapitalsDBHelper.capitals_COLUMN_CAPITAL,
            CapitalsDBHelper.capitals_COLUMN_CITY,
            CapitalsDBHelper.capitals_COLUMN_CITY1
    };

    private static final String[] quizColumns = {
            CapitalsDBHelper.quizzes_COLUMN_ID,
            CapitalsDBHelper.quizzes_DATE,
            CapitalsDBHelper.quizzes_SCORE,
            CapitalsDBHelper.quizzes_Q1,
            CapitalsDBHelper.quizzes_Q2,
            CapitalsDBHelper.quizzes_Q3,
            CapitalsDBHelper.quizzes_Q4,
            CapitalsDBHelper.quizzes_Q5,
            CapitalsDBHelper.quizzes_Q6
    };

    public CapitalsData( Context context ) {
        this.capitalsDbHelper = CapitalsDBHelper.getInstance( context );
    }

    public void open() {
        db = capitalsDbHelper.getWritableDatabase();
        Log.d( DEBUG_TAG, "CapitalsData: db open" );
    }

    // Close the database
    public void close() {
        if( capitalsDbHelper != null ) {
            capitalsDbHelper.close();
            Log.d(DEBUG_TAG, "CapitalsData: db closed");
        }
    }

    public CapitalsData storecapitals( CapitalsData capitalsData ) {
        try {
            // Open the CSV data file in the assets folder
            InputStream in_s = getResources().open( "data.csv" );

            // read the CSV data
            CSVReader reader = new CSVReader( new InputStreamReader( in_s ) );
            String[] nextLine;
            while( ( nextLine = reader.readNext() ) != null ) {

                // nextLine[] is an array of values from the line

                // create the next table row for the layout
                TableRow tableRow = new TableRow( getBaseContext() );
                for( int i = 0; i < nextLine.length; i++ ) {

                    // create a new TextView and set its text
                    TextView textView = new TextView( getBaseContext() );
                    // for all columns exept the SCHOOL, align right
                    if( i != 1 )
                        textView.setGravity(Gravity.RIGHT);
                    textView.setText( nextLine[i] );

                    // add the new TextView to the table row in the table supplying the
                    // layout parameters
                    tableRow.addView( textView, layoutParams );
                }

                // add the next row to the table layout
                tableLayout.addView( tableRow );
            }
        } catch (Exception e) {
            Log.e( TAG, e.toString() );
        }

        // Prepare the values for all of the necessary columns in the table
        // and set their values to the variables of the JobLead argument.
        // This is how we are providing persistence to a JobLead (Java object) instance
        // by storing it as a new row in the database table representing job leads.
        ContentValues values = new ContentValues();
        values.put( CapitalsDBHelper.capitals_COLUMN_ID, jobLead.getCompanyName());
        values.put( CapitalsDBHelper.capitals_COLUMN_STATENAME, jobLead.getPhone() );
        values.put( CapitalsDBHelper.capitals_COLUMN_CAPITAL, jobLead.getUrl() );
        values.put( CapitalsDBHelper.capitals_COLUMN_CITY, jobLead.getComments() );
        values.put( CapitalsDBHelper.capitals_COLUMN_CITY1, jobLead.getComments() );


        // Insert the new row into the database table;
        // The id (primary key) is automatically generated by the database system
        // and returned as from the insert method call.
        long id = db.insert( CapitalsDBHelper.TABLE_CAPITALS, null, values );

        // store the id (the primary key) in the JobLead instance, as it is now persistent
        capitalsData.setId( id );

        Log.d( DEBUG_TAG, "Stored new job lead with id: " + String.valueOf( capitalsData.getId() ) );

        return capitalsData;
    }

}
